// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/Huangkai1008/mall/internal/app/v1/account"
	"github.com/Huangkai1008/mall/internal/app/v1/account/handler"
	"github.com/Huangkai1008/mall/internal/app/v1/account/repository"
	"github.com/Huangkai1008/mall/internal/app/v1/account/router"
	"github.com/Huangkai1008/mall/internal/app/v1/account/service"
	"github.com/Huangkai1008/mall/internal/pkg/config"
	"github.com/Huangkai1008/mall/internal/pkg/provider/auth"
	"github.com/Huangkai1008/mall/internal/pkg/provider/database"
	"github.com/Huangkai1008/mall/internal/pkg/provider/http"
	"github.com/Huangkai1008/mall/internal/pkg/provider/logging"
	"github.com/Huangkai1008/mall/internal/pkg/provider/registry"
	"github.com/Huangkai1008/micro-kit/pkg/application"
	http2 "github.com/Huangkai1008/micro-kit/pkg/transport/http"
	"github.com/google/wire"
)

// Injectors from wire.go:

// CreateApp creates an app by wire.
func CreateApp(cf string) (*application.Application, error) {
	configConfig, err := config.New(cf)
	if err != nil {
		return nil, err
	}
	logger, err := logging.NewLogger(configConfig)
	if err != nil {
		return nil, err
	}
	v := _wireValue
	db, err := database.NewGorm(configConfig, v)
	if err != nil {
		return nil, err
	}
	accountRepository := repository.NewAccountRepository(logger, db)
	jwtAuth := auth.NewJwtAuth(configConfig)
	accountService := service.NewAccountService(logger, accountRepository, jwtAuth)
	accountHandler := handler.NewAccountHandler(logger, accountService)
	group := router.NewAccountRouter(accountHandler)
	customValidator, err := http.NewValidator(configConfig)
	if err != nil {
		return nil, err
	}
	echo, err := http2.NewRouter(logger, group, customValidator)
	if err != nil {
		return nil, err
	}
	client, err := registry.NewConsulClient(configConfig, logger)
	if err != nil {
		return nil, err
	}
	consulRegistry := registry.NewConsulRegistrar(client)
	server := http.NewHTTPServer(configConfig, logger, echo, consulRegistry)
	applicationApplication, err := account.New(configConfig, logger, server)
	if err != nil {
		return nil, err
	}
	return applicationApplication, nil
}

var (
	_wireValue = account.Tables
)

// wire.go:

var providerSet = wire.NewSet(account.ProviderSet, config.ProviderSet, registry.ProviderSet, logging.ProviderSet, auth.ProviderSet, router.ProviderSet, http.ProviderSet, database.ProviderSet, repository.ProviderSet, service.ProviderSet, handler.ProviderSet)
