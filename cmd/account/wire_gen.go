// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	"mall/internal/app/v1/account"
	"mall/internal/app/v1/account/handler"
	"mall/internal/app/v1/account/repository"
	"mall/internal/app/v1/account/router"
	"mall/internal/app/v1/account/service"
	"mall/internal/pkg/application"
	"mall/internal/pkg/config"
	"mall/internal/pkg/database/gorm"
	"mall/internal/pkg/logging"
	"mall/internal/pkg/registry/consul"
	"mall/internal/pkg/transport/http"
	"mall/internal/pkg/validators"
	"mall/pkg/auth/jwtauth"
)

// Injectors from wire.go:

// CreateApp creates an app by wire.
func CreateApp(cf string) (*application.Application, error) {
	viper, err := config.New(cf)
	if err != nil {
		return nil, err
	}
	options, err := logging.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := logging.New(options)
	if err != nil {
		return nil, err
	}
	accountOptions, err := account.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	httpOptions, err := http.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	gormOptions, err := gorm.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	v := _wireValue
	db, err := gorm.New(gormOptions, v)
	if err != nil {
		return nil, err
	}
	accountRepository := repository.NewAccountRepository(logger, db)
	jwtAuth := jwtauth.New()
	accountService := service.NewAccountService(logger, accountRepository, jwtAuth)
	accountHandler := handler.NewAccountHandler(logger, accountService)
	group := router.NewAccountRouter(accountHandler)
	validatorsOptions, err := validators.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	customValidator, err := validators.New(validatorsOptions)
	if err != nil {
		return nil, err
	}
	echo, err := http.NewRouter(httpOptions, logger, group, customValidator)
	if err != nil {
		return nil, err
	}
	consulOptions, err := consul.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	client, err := consul.NewClient(consulOptions, logger)
	if err != nil {
		return nil, err
	}
	registry := consul.New(client)
	server := http.New(httpOptions, logger, echo, registry)
	applicationApplication, err := account.New(accountOptions, logger, server)
	if err != nil {
		return nil, err
	}
	return applicationApplication, nil
}

var (
	_wireValue = account.Tables
)

// wire.go:

var providerSet = wire.NewSet(account.ProviderSet, config.ProviderSet, logging.ProviderSet, http.ProviderSet, gorm.ProviderSet, router.ProviderSet, handler.ProviderSet, repository.ProviderSet, service.ProviderSet, validators.ProviderSet, consul.ProviderSet)
